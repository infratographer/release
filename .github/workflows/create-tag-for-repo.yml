name: Create Release Tag
run-name: Create tag ${{ inputs.version }} for ${{ inputs.org }}/${{ inputs.repo }}

on:
  workflow_call:
    inputs:
      org:
        default: infratographer
        type: string
      repo:
        required: true
        type: string
      release_branch:
        required: true
        type: string
      tag_version:
        required: true
        type: string
    secrets:
      release_bot_token:
        required: true

jobs:
  create_tag:
    name: Create tag ${{ inputs.version }} for ${{ inputs.org }}/${{ inputs.repo }}
    runs-on: ubuntu-latest

    steps:
      - name: Create release tag for ${{ inputs.repo }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.release_bot_token }}
          script: |
            let tagRef = 'tags/${{ inputs.tag_version }}'
            let releaseBranchName = 'releases/${{ inputs.release_branch }}'
            let releaseBranch = 'heads/releases/${{ inputs.release_branch }}'

            async function getRefSHA(branch) {
              try {
                const resp = await github.rest.git.getRef({
                  owner: '${{ inputs.org }}',
                  repo: '${{ inputs.repo }}',
                  ref: branch,
                })
                return resp.data.object.sha
              } catch (error) {
                return ''
              }
            }

            if (await getRefSHA(tagRef) != '') {
              console.log("Release tag already exists, skipping creation")
              return
            }

            const sourceSHA = await getRefSHA(releaseBranch)
            if (sourceSHA == '') {
              throw new Error('Failed to find SHA for release branch')
              return
            }

            const query = `mutation ($input: CreateCommitOnBranchInput!) {
              createCommitOnBranch(input: $input) {
                commit {
                  oid
                }
              }
            }`;
            const variables = {
              input: {
                branch: {
                  repositoryNameWithOwner: '${{ inputs.org }}/${{ inputs.repo }}',
                  branchName: releaseBranchName,
                },
                message: {
                  'headline': 'Release ${{inputs.tag_version}} Commit',
                },
                fileChanges: {},
                expectedHeadOid: sourceSHA
              }
            }
            const releaseCommit = await github.graphql(query, variables)

            if (releaseCommit.data.createCommitOnBranch.commit.oid == '') {
              throw new Error('Failed to find SHA for release commit')
              return
            }

            github.rest.git.createRef({
              owner: '${{ inputs.org }}',
              repo: '${{ inputs.repo }}',
              ref: `refs/${ tagRef }`,
              sha: releaseCommit.data.createCommitOnBranch.commit.oid,
            })
